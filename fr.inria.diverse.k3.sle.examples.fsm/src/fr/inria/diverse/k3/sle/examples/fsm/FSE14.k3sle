package fr.inria.diverse.k3.sle.examples.fsm

import static extension fr.inria.diverse.k3.sle.lib.MetamodelExtensions.*

import fr.inria.diverse.k3.sle.examples.fsm.ExecutableFsmAspect
import fr.inria.diverse.k3.sle.examples.fsm.ExecutableStateAspect
import fr.inria.diverse.k3.sle.examples.fsm.ExecutableTransitionAspect

import fr.inria.diverse.k3.sle.examples.fsm.TimedFsmAspect
import fr.inria.diverse.k3.sle.examples.fsm.TimedStateAspect
import fr.inria.diverse.k3.sle.examples.fsm.TimedTransitionAspect

import fr.inria.diverse.k3.sle.examples.fsm.fsmmt.FSM

/*-- Structure --*/
metamodel Fsm {
	ecore  "platform:/resource/fr.inria.diverse.k3.sle.examples.fsm.metamodel/model/FSM.ecore"
	
	aspect ExecutableFsmAspect
	aspect ExecutableStateAspect
	aspect ExecutableTransitionAspect
}

metamodel TimedFsm {
	ecore  "platform:/resource/fr.inria.diverse.k3.sle.examples.timedfsm.metamodel/model/TimedFSM.ecore"
	
	aspect TimedFsmAspect
	aspect TimedStateAspect
	aspect TimedTransitionAspect
}

modeltype FsmMT extract Fsm {}
modeltype TimedFsmMT extract TimedFsm {}

/*-- Transformations --*/
transformation execute(FsmMT fsm, String input) {
	val root = fsm.contents.head as FSM
	
	root.execute(input)
	println
}

@Main
transformation main() {
	val fsm  =      Fsm.load("input/Simple.fsm",      FsmMT)
	val tfsm = TimedFsm.load("input/Simple.timedfsm", FsmMT)
	
	execute.call(fsm,  "adcdce")
	execute.call(tfsm, "a")
}
